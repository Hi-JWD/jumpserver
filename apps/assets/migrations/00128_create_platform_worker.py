# Generated by Django 3.1.14 on 2022-04-26 07:58

import json

from django.db import migrations

from assets.const import AllTypes

platform_data = {
    "category": "host",
    "type": "linux",
    "internal": True,
    "charset": "utf-8",
    "domain_enabled": False,
    "su_enabled": False,
    "name": "Worker",
    "automation": {
        "ansible_enabled": True,
        "ansible_config": {
            "ansible_connection": "smart"
        },
        "ping_enabled": True,
        "gather_facts_enabled": True,
        "gather_accounts_enabled": True,
        "verify_account_enabled": True,
        "change_secret_enabled": True,
        "push_account_enabled": True,
        "ping_method": "posix_ping",
        "gather_facts_method": "gather_facts_posix",
        "gather_accounts_method": "gather_accounts_posix",
        "verify_account_method": "verify_account_posix",
        "change_secret_method": "change_secret_posix",
        "push_account_method": "push_account_posix"
    },
    "protocols": [
        {
            "name": "ssh",
            "port": 22,
            "setting": {
                "sftp_enabled": True,
                "sftp_home": "/tmp"
            },
            "primary": True,
            "required": False,
            "default": False
        },
        {
            "name": "telnet",
            "port": 23,
            "required": False,
            "default": False,
            "setting": {}
        },
        {
            "name": "vnc",
            "port": 5900,
            "required": False,
            "default": False,
            "setting": {}
        },
        {
            "name": "rdp",
            "port": 3389,
            "setting": {
                "console": False,
                "security": "any"
            },
            "required": False,
            "default": False
        }
    ]
}


def create_worker_platforms(apps, *args):
    platform_cls = apps.get_model('assets', 'Platform')
    automation_cls = apps.get_model('assets', 'PlatformAutomation')
    automation_data = platform_data.pop('automation', {})
    protocols_data = platform_data.pop('protocols', [])
    name = platform_data['name']
    platform, created = platform_cls.objects.update_or_create(
        defaults=platform_data, name=name
    )
    if created:
        automation = automation_cls.objects.create()
        platform.automation = automation
        platform.save()
    else:
        automation = platform.automation
    for k, v in automation_data.items():
        setattr(automation, k, v)
    automation.save()

    platform.protocols.all().delete()
    for p in protocols_data:
        platform.protocols.create(**p)


class Migration(migrations.Migration):
    dependencies = [
        ('assets', '0127_automation_remove_account'),
    ]

    operations = [
        migrations.RunPython(create_worker_platforms),
    ]
